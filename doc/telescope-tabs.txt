telescope-tabs.txt                             Fly through your tabs in neovim

Author:  Lukas Pietzschmann <https://lukas.pietzschmann.org>
Repo:    https://github.com/LukasPietzschmann/telescope-tabs
License: BSD-3-Clause

==============================================================================
INTRODUCTION                                                  *telescope-tabs*

telescope-tabs is a small extension for telescope.nvim. It makes it more
convenient to switch between tabs in a fast way.
Additionally you can switch back to your last used tab immediately, without
having to select it manually.
Note that this extension wont work well with buffer-line extensions, as it
does not show single buffers (like :Telescope buffers does). Only "real" tabs
are displayed!

==============================================================================
CONFIGURATION                                                  *configuration*

Call the setup function with a table as the argument to override the default
configuration.

require'telescope-tabs'.setup {
    -- This function is used to convert a tab to a string that can then be
    -- displayed and selected
    -- tab_id: id of the tab. This id can be passed to neovims api in order
    --         to get information about the tab.
    -- buffer_ids: A list of ids for every buffer opened in the tab. Those
    --             ids can be passed to neovims api in order to get
    --             information about the buffer.
    -- file_names: A list of names (strings) for every buffer opened in the
    --             tab.
    -- file_paths: A list of paths (strings) for every buffer opened in the
    --             tab.
    -- is_current: Boolean value, true if it is the current tab.
    --
    -- buffer_ids, file_names and file_paths contain their information in
    -- the same order. So buffer_ids[1], file_names[1] and file_paths[1]
    -- refer to the same buffer.
    entry_formatter = function(tab_id, buffer_ids, file_names, file_paths, is_current)
        local entry_string = table.concat(file_names, ', ')
        return string.format('%d: %s%s', tab_id, entry_string, is_current and ' <' or '')
    end,
}

==============================================================================
USAGE                                                   *telescope-tabs-usage*

:lua require('telescope-tabs').list_tabs()                         *list_tabs*
This lets you select a tab from all currently opened tabs.
You can pass arguments to this function in order to overwrite the global
configuration.

:lua require('telescope-tabs').go_to_previous()                *go_to_previous*
This function opens the last used tab immediately. This works by registering an
auto-command for the 'TabEnter' event that keeps track of your tab-navigations.
So this function does not only work if you switch tabs using this extension, it
also functions just fine when navigating using NeoVim's tab movement methods.

==============================================================================
API                                                        *telescope-tabs-api*

The available command can also be accessed from lua.

local tabs = require'telescope-tabs'

tabs.setup(opts: {table})
    See configuration

tabs.list_tabs(opts: {table})
    This lets you select a tab from all currently opened tabs.
    You can pass arguments to this function in order to overwrite the global
    configuration.

tabs.go_to_previous()
    This function opens the last used tab immediately. This works by registering
    an auto-command for the 'TabEnter' event that keeps track of your
    tab-navigations. So this function does not only work if you switch tabs
    using this extension, it also functions just fine when navigating using
    NeoVim's tab movement methods.
